version: '3.7'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.7.0
    build: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - bootstrap.memory_lock=false
      - discovery.type=single-node
    networks:
      some_network:

  django_gunicorn:
    restart: always
    volumes:
      - ./django_project:/app
      - static:/static
    env_file:
      - .env
    build:
      context: .
    ports:
      - "8000:8000"
    depends_on:
      - elasticsearch
      - db
    links:
      - db:db
    networks:
      some_network:

  db:
    image: postgres
    volumes:
    - postgres_data:/var/lib/postgresql/data/
    environment:
    - POSTGRES_PASSWORD=123
    - POSTGRES_USER=postgres
    - POSTGRES_DB=movies
    ports:
    - 5432:5432
    networks:
      some_network:

  nginx:
    build: ./nginx
    restart: always
    volumes:
      - .:/code
      - static:/static
    ports:
      - "80:80"
    depends_on:
      - django_gunicorn
      - elasticsearch
    links:
      - db:db
    networks:
      some_network:

#  redis:
#    container_name: redis
#    image: redis:3.2.0
#    ports:
#      - 6379:6379
#    volumes:
#      - ./redisdata:/redistata

  redis:
    container_name: redis
    image: redis:4.0-alpine
    command:
      - 'redis-server'
      - '--loglevel ${REDIS_LOGLEVEL:-warning}'
      - '--databases 2'
      - '--save 900 1'
      - '--save 300 10'
      - '--save 60 10000'
      - '--maxmemory ${REDIS_MAXMEM:-50mb}'
      - '--maxmemory-policy ${REDIS_POLICY:-noeviction}'
    volumes:
      - ./redisdata:/redistata
    ports:
      - "6379:6379"

volumes:
  redisdata:
  code:
  static:
  postgres_data:

networks:
  some_network:
    driver: bridge
